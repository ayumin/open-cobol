## Copyright (C) 2003,2004,2005,2006,2007 Keisuke Nishida
## Copyright (C) 2007-2012 Roger While
## Copyright (C) 2014 Simon Sobisch
## 
## This file is part of GNU Cobol.
## 
## The GNU Cobol compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GNU Cobol is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GNU Cobol.  If not, see <http://www.gnu.org/licenses/>.

### GNU Cobol Test Suite

### Non-standard extensions


AT_SETUP([CALL BY CONTENT binary and literal])
AT_KEYWORDS([extensions])

AT_DATA([dump.c], [
#include <stdio.h>
#ifdef	__INTEL_COMPILER
#pragma warning ( disable : 1419 )
#endif
#define COB_LIB_EXPIMP
#include <libcob.h>
COB_EXPIMP int dump (unsigned char *, int *);
int dump (unsigned char *data, int *p)
{
  int i;
  if ( *p == 1 ) {
     for (i = 0; i < 4; i++)
       printf ("%02x", data[[i]]);
  } else {
       printf ("%8.8d", *((int *)data));
  }
  puts ("");
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC 9(9) VALUE 4660 COMP.
       01 X-2           PIC 9(9) VALUE 4660 COMP-5.
       PROCEDURE        DIVISION.
           CALL "dump" USING X-1 BY CONTENT 1
           END-CALL.
           CALL "dump" USING X-2 BY CONTENT 2
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], , [])
AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[00001234
00004660
])

AT_CLEANUP

## H literal

AT_SETUP([Hexadecimal numeric literal])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC 9(8) VALUE H"012345".
       01 X-2           PIC 9(8) VALUE H"FFFFFF".
       PROCEDURE        DIVISION.
           DISPLAY X-1
           END-DISPLAY.
           DISPLAY X-2
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[00074565
16777215
])

AT_CLEANUP

## Expression

AT_SETUP([Semi-parenthesized condition])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF 1 = (1 OR 2)
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP

## ADDRESS OF

AT_SETUP([ADDRESS OF])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC X(3) VALUE "X-1".
       01 X-2           PIC X(3) VALUE "X-2".
       01 G.
         02 PTR-1       USAGE POINTER VALUE NULL.
         02 PTR-2       USAGE POINTER VALUE NULL.
       LINKAGE          SECTION.
       01 Y             PIC X(3).
       PROCEDURE        DIVISION.
         SET ADDRESS OF Y TO ADDRESS OF X-1.
         IF Y NOT = "X-1"
            DISPLAY "Test 1 " Y
            END-DISPLAY
         END-IF.
         SET PTR-1 TO ADDRESS OF X-2.
         SET PTR-2 TO PTR-1
         SET ADDRESS OF Y TO PTR-2.
         IF Y NOT = "X-2"
            DISPLAY "Test 2 " Y
            END-DISPLAY
         END-IF
         INITIALIZE PTR-1.
         IF PTR-1 NOT = NULL
           DISPLAY "NG 1"
           END-DISPLAY
         END-IF.
         SET ADDRESS OF Y TO NULL.
         IF PTR-1 NOT = ADDRESS OF Y
           DISPLAY "NG 2"
           END-DISPLAY
         END-IF.
         IF ADDRESS OF Y NOT = PTR-1
           DISPLAY "NG 3"
           END-DISPLAY
         END-IF.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

## LENGTH OF

AT_SETUP([LENGTH OF])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(2).
       01 G.
         02 Y           PIC X(2) OCCURS 10.
       01 L             PIC 9(4).
       01 I             PIC 9(2) VALUE 10.
       PROCEDURE        DIVISION.
           MOVE LENGTH OF X TO L.
           IF L NOT = 2
              DISPLAY "Length 1 " L
              END-DISPLAY
           END-IF.
           MOVE LENGTH OF Y TO L.
           IF L NOT = 2
              DISPLAY "Length 2 " L
              END-DISPLAY
           END-IF.
           MOVE LENGTH OF Y(1) TO L.
           IF L NOT = 2
              DISPLAY "Length 3 " L
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

## WHEN-COMPILED

AT_SETUP([WHEN-COMPILED])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(20).
       PROCEDURE        DIVISION.
           MOVE WHEN-COMPILED TO X.
           INSPECT X CONVERTING "0123456789" TO "9999999999".
           IF X NOT = "99/99/9999.99.99    "
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

## OCCURS

AT_SETUP([Complex OCCURS DEPENDING ON (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I PIC 9.
       01 G-1 VALUE "123456789".
         02 G-2.
           03 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
         02 G-3.
           03 G-4.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
           03 G-5.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
       PROCEDURE        DIVISION.
           MOVE 2 TO I.
           DISPLAY G-1 ":" G-4 ":" G-5 NO ADVANCING
           END-DISPLAY.
])

AT_CHECK([$COMPILE -std=mvs -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0], [123456:34:56])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[18181    22        333
1818  3    22      111
])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON (3)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -fodoslide -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[0606122333
1010  3  22111
])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON (4)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
             05  VFIX   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    '444'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    '000'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[33331    22        333            444
3333  3    22      111            000
])

AT_CLEANUP

AT_SETUP([Complex OCCURS DEPENDING ON (5)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
             05  VFIX   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    '444'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    '000'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -fodoslide -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[0909122333444
1313  3  22111000
])

AT_CLEANUP

AT_SETUP([INITIALIZE level 01])
AT_KEYWORDS([initialize])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 L1 OCCURS 1000 TIMES.
           05 L2 PIC S9(9) COMP-5 VALUE 5.
           05 L3 PIC S9(9)        VALUE 5.
       PROCEDURE DIVISION.
           IF L2(3) not = 5
              DISPLAY '0 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           INITIALIZE L1(1).
           IF L2(1) not = 0
              DISPLAY '1 VALUE(1) = ' L2(1)
              END-DISPLAY
           END-IF.
           IF L2(3) not = 5
              DISPLAY '1 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           INITIALIZE L1(1)  DEFAULT.
           IF L2(1) not = 0
              DISPLAY '2 VALUE(1) = ' L2(1)
              END-DISPLAY
           END-IF.
           IF L2(3) not = 5
              DISPLAY '2 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           INITIALIZE L1(1)  ALL VALUE.
           IF L2(1) not = 5
              DISPLAY '3 VALUE(1) = ' L2(1)
              END-DISPLAY
           END-IF.
           IF L2(3) not = 5
              DISPLAY '3 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

AT_SETUP([MOVE NON-INTEGER TO ALPHA-NUMERIC])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
        01 INTEGER             PIC 9(4)   VALUE 1289 .
        01 SIGNED-INTEGER      PIC S9(4)  VALUE -1289 .

        01 ALPHA-FIELD         PIC X(4).

        01 NON-INTEGER           PIC 9(2)V99   VALUE 12.89 .
        01 NON-INTEGER-2         PIC 9(2)V99   
                                     USAGE BINARY VALUE 12.89 .
        01 NON-INTEGER-3         PIC 9(2)V99
                                      USAGE PACKED-DECIMAL VALUE 12.89 .
        01 SIGNED-NON-INTEGER    PIC S9(2)V99   VALUE -12.89 .
        01 SIGNED-NON-INTEGER-2  PIC S9(2)V99
                                     USAGE BINARY VALUE -12.89 .
        01 SIGNED-NON-INTEGER-3  PIC S9(2)V99
                                     USAGE PACKED-DECIMAL VALUE -12.89 .

       PROCEDURE        DIVISION.
*     *    MOVE NON-INTEGER TO ALPHA-NUMERIC --> ignore Decimal Point!
       S-01.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-02.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-03.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-10.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER-2 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-20.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER-3 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-30.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-40.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER-2 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-50.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER-3 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.

          STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -o prog prog.cob], [0], ,
[prog.cob: In paragraph 'S-03':
prog.cob: 36: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-10':
prog.cob: 41: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-20':
prog.cob: 46: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-30':
prog.cob: 51: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-40':
prog.cob: 56: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-50':
prog.cob: 61: Warning: Move non-integer to alphanumeric
])
AT_CHECK([./prog], [0], [12891289128912891289128912891289])

AT_CLEANUP

## CALL

AT_SETUP([CALL USING file-name])
AT_KEYWORDS([extensions])

AT_DATA([setfilename.c], [
#include <stdio.h>
#include <string.h>
#define COB_LIB_EXPIMP
#include <libcob.h>
COB_EXPIMP int setfilename (cob_file *f, unsigned char *name)
{
  memcpy (f->assign->data, name, strlen ((char *)name));
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       WORKING-STORAGE  SECTION.
       01 FILENAME      PIC X(8).
       PROCEDURE        DIVISION.
           INITIALIZE FILENAME.
           CALL "setfilename" USING TEST-FILE "TESTFILE"
           END-CALL.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE setfilename.c], [0], , [])
AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])
AT_CHECK([test -e TESTFILE], [0])

AT_CLEANUP

AT_SETUP([CALL unusual PROGRAM-ID.])
AT_KEYWORDS([extensions])

AT_DATA([A@B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A@B".
       PROCEDURE        DIVISION.
           DISPLAY "P1" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A@%:@B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A@%:@B".
       PROCEDURE        DIVISION.
           DISPLAY "P2" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A-B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A-B".
       PROCEDURE        DIVISION.
           DISPLAY "P3" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A_B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A_B".
       PROCEDURE        DIVISION.
           DISPLAY "P4" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "A@B"
           END-CALL.
           CALL "A@%:@B"
           END-CALL.
           CALL "A-B"
           END-CALL.
           CALL "A_B"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE A@B.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE A@%:@B.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE A-B.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE A_B.cob], [0], , [])
AT_CHECK([$COMPILE -o caller caller.cob], [0], , [])

AT_CHECK([./caller], [0], [P1P2P3P4])

AT_CLEANUP

AT_SETUP([CALL BY VALUE alphanumeric item])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           CALL "prog2" USING BY VALUE X
           END-CALL.
           IF X NOT = "OK"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01  X            PIC XX.
       PROCEDURE        DIVISION USING BY VALUE X.
           MOVE "KO" TO X.
           EXIT PROGRAM.
       END PROGRAM prog2.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], ,
[prog.cob: 8: Warning: BY CONTENT assumed for alphanumeric item
])
AT_CHECK([./prog], [0], [])

AT_CLEANUP

AT_SETUP([Case independent PROGRAM-ID])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      PROG.
       PROCEDURE        DIVISION.
           CALL "prog"
           END-CALL.
           STOP RUN.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
       END PROGRAM prog.
       END PROGRAM PROG.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

AT_SETUP([PROGRAM-ID AS clause])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller AS "PROG".
       PROCEDURE        DIVISION.
           CALL "prog"
           END-CALL.
           STOP RUN.
       PROGRAM-ID.      callee AS "prog".
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
       END PROGRAM callee.
       END PROGRAM caller.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

AT_SETUP([Quoted PROGRAM-ID])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "caller".
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
       PROGRAM-ID.      "callee".
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
       END PROGRAM callee.
       END PROGRAM caller.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP

## ASSIGN

AT_SETUP([ASSIGN clause])
AT_KEYWORDS([extensions])

AT_DATA([test.conf], [
include "cobol2002.conf"
assign-clause: mf
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           MOVE "TEST-FILE" TO FILENAME.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -conf=test.conf -o prog prog.cob], [0], ,
[prog.cob: 12: Warning: 'FILENAME' will be implicitly defined
])
AT_CHECK([./prog], [0])

AT_CLEANUP

AT_SETUP([ASSIGN clause IBM])
AT_KEYWORDS([extensions])

AT_DATA([test.conf], [
include "cobol2002.conf"
assign-clause: ibm
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN DA-S-FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -conf=test.conf -o prog prog.cob], [0], ,
[prog.cob: 7: Warning: ASSIGN interpreted as FILENAME
])
AT_CHECK([./prog], [0])
AT_CHECK([test -f FILENAME], [0])

AT_CLEANUP

AT_SETUP([ASSIGN mapping])
AT_KEYWORDS([extensions])

AT_DATA([test.conf], [
include "cobol2002.conf"
filename-mapping: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAME".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -conf=test.conf -o prog prog.cob], [0], , [])
AT_CHECK([DD_FILENAME="x" ./prog], [0])
AT_CHECK([test -f "x"], [0])
AT_CHECK([dd_FILENAME="y" ./prog], [0])
AT_CHECK([test -f "y"], [0])
AT_CHECK([FILENAME="z" ./prog], [0])
AT_CHECK([test -f "z"], [0])
AT_CHECK([./prog], [0])
AT_CHECK([test -f "FILENAME"], [0])

AT_CLEANUP

AT_SETUP([ASSIGN expansion])
AT_KEYWORDS([extensions])

AT_DATA([test.conf], [
include "cobol2002.conf"
filename-mapping: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "$DIR/FILENAME".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -conf=test.conf -o prog prog.cob], [0], , [])
AT_CHECK([DIR="." ./prog], [0])
AT_CHECK([test -f "./FILENAME" && rm -f "./FILENAME"], [0])

AT_CLEANUP

AT_SETUP([ASSIGN with COB_FILE_PATH])
AT_KEYWORDS([extensions])

AT_DATA([test.conf], [
include "cobol2002.conf"
filename-mapping: yes
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAMEX".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -conf=test.conf -o prog prog.cob], [0], , [])
AT_CHECK([COB_FILE_PATH=".." ./prog], [0])
AT_CHECK([test -f "../FILENAMEX" && rm -f "../FILENAMEX"], [0])

AT_CLEANUP

# Number of call parameters

AT_SETUP([NUMBER-OF-CALL-PARAMETERS])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 W             PIC X.
       01 X             PIC X.
       01 Y             PIC X.
       01 Z             PIC X.
       PROCEDURE        DIVISION
           USING W X Y Z.
           DISPLAY NUMBER-OF-CALL-PARAMETERS
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 W             PIC X.
       01 X             PIC X.
       01 Y             PIC X.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           CALL "callee" USING W
           END-CALL.
           CALL "callee" USING W X
           END-CALL.
           CALL "callee" USING W X Y
           END-CALL.
           CALL "callee" USING W X Y Z
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], , [])
AT_CHECK([./caller], [0],
[+000000000
+000000001
+000000002
+000000003
+000000004
])

AT_CLEANUP

# Program parameters

AT_SETUP([PROCEDURE DIVISION USING BY ...])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 X             PIC X.
       01 Y             PIC 99.
       01 Z             PIC 99 USAGE COMP.
       PROCEDURE        DIVISION
           USING BY VALUE X BY REFERENCE Y Z.
           MOVE "Z" TO X.
           MOVE 56 TO Y.
           MOVE 78 TO Z.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       01 Y             PIC 99.
       01 Z             PIC 99 USAGE COMP.
       PROCEDURE        DIVISION.
           MOVE "X" TO X.
           MOVE 12 TO Y.
           MOVE 34 TO Z.
           CALL "callee" USING BY CONTENT X
                               BY REFERENCE Y
                               BY CONTENT Z
           END-CALL.
           IF X NOT = "X" OR
              Y NOT = 56  OR
              Z NOT = 34
                DISPLAY "X = " X " Y = " Y " Z = " Z
                END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], , [])
AT_CHECK([./caller], [0])

AT_CLEANUP

AT_SETUP([PROCEDURE DIVISION CHAINING ...])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X.
       01  ABCD         PIC X(4).
       PROCEDURE        DIVISION
                        CHAINING X ABCD.
           IF X    NOT = "X" OR
              ABCD NOT = "ABCD"
              DISPLAY "X = " X " ABCD = " ABCD
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])

AT_CHECK([./prog X ABCD], [0])

AT_CLEANUP

AT_SETUP([STOP RUN RETURNING/GIVING])
AT_KEYWORDS([extensions])

AT_DATA([prog1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog1.
       PROCEDURE        DIVISION.
           STOP RUN RETURNING 1.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       PROCEDURE        DIVISION.
           STOP RUN GIVING 2.
])

AT_CHECK([$COMPILE prog1.cob], [0], , [])
AT_CHECK([./prog1], [1])

AT_CHECK([$COMPILE prog2.cob], [0], , [])
AT_CHECK([./prog2], [2])

AT_CLEANUP


AT_SETUP([GOBACK/EXIT PROGRAM RETURNING/GIVING])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  RETURN-DISP  PIC S9(08).
       PROCEDURE        DIVISION.
           CALL 'prog1' END-CALL
           IF RETURN-CODE NOT = -1
              MOVE RETURN-CODE TO RETURN-DISP
              DISPLAY 'RETURN-CODE ' RETURN-DISP
                      ' INSTEAD OF -1'
              END-DISPLAY
           END-IF
           CALL 'prog2' END-CALL
           IF RETURN-CODE NOT = 2
              MOVE RETURN-CODE TO RETURN-DISP
              DISPLAY 'RETURN-CODE ' RETURN-DISP
                      ' INSTEAD OF 2'
              END-DISPLAY
           END-IF
           STOP RUN.
])

AT_DATA([prog1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog1.
       PROCEDURE        DIVISION.
           EXIT PROGRAM RETURNING -1.
])


AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       PROCEDURE        DIVISION.
           GOBACK GIVING 2.
])

AT_CHECK([$COMPILE prog.cob prog1.cob prog2.cob], [0], , [])
AT_CHECK([./prog], [2])

AT_CLEANUP


# ENTRY

AT_SETUP([ENTRY])
AT_KEYWORDS([extensions])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           CALL "hello" USING "COBOL"
           END-CALL.
           CALL "bye" USING "COBOL"
           END-CALL.
           STOP RUN.
])

AT_DATA([hello.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      hello.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MSG-HELLO     PIC X(7) VALUE "Hello, ".
       01 MSG-BYE       PIC X(5) VALUE "Bye, ".
       LINKAGE          SECTION.
       01 X             PIC X(5).
       01 Y             PIC X(5).
       PROCEDURE        DIVISION USING X.
           DISPLAY MSG-HELLO X "!"
           END-DISPLAY.
           EXIT PROGRAM.

       ENTRY "bye" USING Y.
           DISPLAY MSG-BYE Y "!"
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE -std=mvs caller.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE -std=mvs hello.cob], [0], , [])
AT_CHECK([./caller], [0],
[Hello, COBOL!
Bye, COBOL!
])

AT_CLEANUP


## LINE SEQUENTIAL

AT_SETUP([LINE SEQUENTIAL write])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           MOVE "a"    TO TEST-REC.
           WRITE TEST-REC
           END-WRITE.
           MOVE "ab"   TO TEST-REC.
           WRITE TEST-REC AFTER 1 LINES
           END-WRITE.
           MOVE "abc"  TO TEST-REC.
           WRITE TEST-REC BEFORE 2 LINES
           END-WRITE.
           MOVE "abcd" TO TEST-REC.
           WRITE TEST-REC
           END-WRITE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog])
AT_CHECK([cat TEST-FILE], [0], 
[a

ababc

abcd
])

AT_CLEANUP


AT_SETUP([LINE SEQUENTIAL read])
AT_KEYWORDS([extensions])

AT_DATA([TEST-FILE],
[a
ab
abc
abcd
abcde
abcdef
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN INPUT TEST-FILE.
           READ TEST-FILE
           END-READ.
           DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ.
           DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ.
           DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ.
           DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ.
           DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           READ TEST-FILE
           END-READ.
           DISPLAY "(" TEST-REC ")"
           END-DISPLAY.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[(a   )
(ab  )
(abc )
(abcd)
(abcd)
(abcd)
])

AT_CLEANUP


AT_SETUP([ASSIGN to KEYBOARD/DISPLAY])
AT_KEYWORDS([extensions])

AT_DATA([TEST-FILE],
[a
ab
abc
abcd
abcde
abcdef
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN  KEYBOARD
                        ORGANIZATION IS LINE SEQUENTIAL.
       SELECT TEST-OUT  ASSIGN  DISPLAY
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(80).
       FD TEST-OUT.
       01 TEST-REC-OUT  PIC X(80).
       PROCEDURE        DIVISION.
       A00.
           OPEN INPUT  TEST-FILE.
           OPEN OUTPUT TEST-OUT.
       A01.
           READ TEST-FILE AT END
                GO TO Z99
           END-READ.
           WRITE TEST-REC-OUT FROM TEST-REC
           END-WRITE.
           GO TO A01.
       Z99.
           CLOSE TEST-FILE.
           CLOSE TEST-OUT.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([cat TEST-FILE | ./prog], [0],
[a
ab
abc
abcd
abcde
abcdef
])

AT_CLEANUP


AT_SETUP([SORT ASSIGN KEYBOARD to ASSIGN DISPLAY])
AT_KEYWORDS([extensions])

# GC has an extension "SORT FILES always in memory" and therefore didn't
# used the ASSIGN clause (which should be mandatory) for SORT files at all.
# We should add an according test and change the test here after cleanup,
# either officially removing the "ASSIGN clause not necessary for SORT FILES"
# extension or enable it only with either a conf entry or frelax-syntax.
AT_XFAIL_IF(true)

AT_DATA([TEST-FILE],
[9
22
11
0
00
8
77
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN  KEYBOARD
                        ORGANIZATION IS LINE SEQUENTIAL.
       SELECT TEST-OUT  ASSIGN  DISPLAY
                        ORGANIZATION IS LINE SEQUENTIAL.
       SELECT SORT-FILE.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(80).
       FD TEST-OUT.
       01 TEST-REC-OUT  PIC X(80).
       SD SORT-FILE.
       01 SORT-REC      PIC X(80).
       PROCEDURE        DIVISION.
       A00.
           SORT SORT-FILE
                ON ASCENDING SORT-REC
                USING        TEST-FILE
                GIVING       TEST-OUT.
           STOP RUN.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([cat TEST-FILE | ./prog], [0],
[0
00
11
22
77
8
9
])

AT_CLEANUP


AT_SETUP([Environment/Argument variable])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4).
       01 Y             PIC X(8).
       01 Z             PIC 9(4).
       PROCEDURE        DIVISION.
           DISPLAY "TEST_ENV" UPON ENVIRONMENT-NAME
           END-DISPLAY.
           ACCEPT X FROM ENVIRONMENT-VALUE
           END-ACCEPT.
           DISPLAY "(" X ")"
           END-DISPLAY.
           DISPLAY "RXW" UPON ENVIRONMENT-VALUE
           END-DISPLAY.
           ACCEPT X FROM ENVIRONMENT-VALUE
           END-ACCEPT.
           DISPLAY "(" X ")"
           END-DISPLAY.
           ACCEPT Y FROM ARGUMENT-VALUE
           END-ACCEPT.
           DISPLAY "(" Y ")"
           END-DISPLAY.
           ACCEPT Z FROM ARGUMENT-NUMBER
           END-ACCEPT.
           DISPLAY "(" Z ")"
           END-DISPLAY.
           STOP RUN.
])

export TEST_ENV=OK
AT_CHECK([$COMPILE -o prog prog.cob], [0], , [])
AT_CHECK([./prog CHECKPAR], [0],
[(OK  )
(RXW )
(CHECKPAR)
(0001)
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[00,50
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[03,00
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (3)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[01,50
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (4)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[00,10
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (5)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           COMPUTE X=1 + ,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           COMPUTE X=1*,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[01,10
00,10
])

AT_CLEANUP


AT_SETUP([78 Level (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       78  X            VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP


AT_SETUP([78 Level (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z.
       78  X            VALUE "OK".
       78  Y            VALUE "OK".
           03  FILLER   PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY X Z Y
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OKOKOK
])

AT_CLEANUP


AT_SETUP([78 Level (3)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       78  X            VALUE "OK".
       01  Z            PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY Z X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OKOK
])

AT_CLEANUP


AT_SETUP([DEBUG (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "OK"
           END-DISPLAY.
      D    DISPLAY "OK"
      D    END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP


AT_SETUP([DEBUG (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "OK"
           END-DISPLAY.
      D    DISPLAY "OK"
      D    END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -fdebugging-line prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OK
OK
])

AT_CLEANUP


AT_SETUP([DEBUG free format (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
             DISPLAY "OK"
             END-DISPLAY.
      >>D    DISPLAY "OK"
      >>D    END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE -free prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OK
])

AT_CLEANUP


AT_SETUP([DEBUG free format (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
             DISPLAY "OK"
             END-DISPLAY.
      >>D    DISPLAY "OK"
      >>D    END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE -free -fdebugging-line prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OK
OK
])

AT_CLEANUP


AT_SETUP([SOURCE FIXED/FREE directives])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       >>SOURCE FREE
   DATA             DIVISION.
   WORKING-STORAGE  SECTION.
   >>SOURCE FIXED
       PROCEDURE        DIVISION.                                       DISPLAY
             DISPLAY "OK"
             END-DISPLAY.
       >>SOURCE FREE
                                                                        DISPLAY
   "OK"
   END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OK
OK
])

AT_CLEANUP


AT_SETUP([Obsolete 85 keywords])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  TERMINAL     PIC XX VALUE "OK".
       01  SEND         PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           DISPLAY TERMINAL SEND
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0],
[OKOK
])

AT_CLEANUP


#  System routines

AT_SETUP([System routine C$CALLEDBY])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(6) VALUE "X".
       PROCEDURE        DIVISION.
           CALL "C$CALLEDBY" USING X
           END-CALL.
           IF RETURN-CODE = 1 AND
              X = "caller"
              DISPLAY "OK" NO ADVANCING
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(6) VALUE "X".
       PROCEDURE        DIVISION.
           CALL "C$CALLEDBY" USING X
           END-CALL.
           IF RETURN-CODE = 0 AND
              X = SPACES
              DISPLAY "OK" NO ADVANCING
              END-DISPLAY
           END-IF.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], , [])
AT_CHECK([./caller], [1], [OKOK])

AT_CLEANUP


AT_SETUP([System routine C$NARG])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            USAGE BINARY-LONG.
       LINKAGE SECTION.
       01  Y            PIC   X.
       PROCEDURE        DIVISION USING Y.
           CALL "C$NARG" USING X
           END-CALL.
           IF X NOT = 1
              DISPLAY "NOTOK"  X
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X VALUE "X".
       PROCEDURE        DIVISION.
           CALL "callee" USING X
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], , [])
AT_CHECK([./caller], [0])

AT_CLEANUP


AT_SETUP([System routine C$PARAMSIZE])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            USAGE BINARY-LONG.
       LINKAGE SECTION.
       01  Y            PIC   X ANY LENGTH.
       PROCEDURE        DIVISION USING Y.
           MOVE 1 TO X.
           CALL "C$PARAMSIZE" USING X
           END-CALL.
           IF RETURN-CODE NOT = 2
              DISPLAY "NOTOK "  RETURN-CODE
              END-DISPLAY
           END-IF.
           MOVE 0 TO RETURN-CODE.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC XX VALUE "XY".
       PROCEDURE        DIVISION.
           CALL "callee" USING X
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], , [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], , [])
AT_CHECK([./caller], [0])

AT_CLEANUP


AT_SETUP([System routine C$JUSTIFY])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE " OK ".
       PROCEDURE        DIVISION.
           CALL "C$JUSTIFY" USING X "L"
           END-CALL.
           IF X NOT = "OK  "
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine C$PRINTABLE])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X.
           03  X1       PIC X.
           03  X234     PIC XXX.
       PROCEDURE        DIVISION.
           MOVE LOW-VALUE TO X1.
           MOVE "BCD"     TO X234.
           CALL "C$PRINTABLE" USING X
           END-CALL.
           IF X NOT = ".BCD"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine C$MAKEDIR])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           CALL "C$MAKEDIR" USING "TMP"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])
AT_CHECK([test -d "TMP" && rmdir "TMP"], [0])

AT_CLEANUP


AT_SETUP([System routine C$GETPID])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           CALL "C$GETPID"
           END-CALL.
           IF RETURN-CODE = 0
              DISPLAY RETURN-CODE
              END-DISPLAY
           END-IF.
           MOVE 0 TO RETURN-CODE.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine C$TOUPPER])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(2) VALUE "ok".
       PROCEDURE        DIVISION.
           CALL "C$TOUPPER" USING X BY VALUE 2
           END-CALL.
           IF X NOT = "OK"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine C$TOLOWER])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           CALL "C$TOLOWER" USING X BY VALUE 2
           END-CALL.
           IF X NOT = "ok"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_OR])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE "0000".
       01  Z            PIC X(4) VALUE X"01010101".
       PROCEDURE        DIVISION.
           CALL "CBL_OR" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = "1111"
              DISPLAY Z NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_NOR])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE X"03030303".
       01  Z            PIC X(4) VALUE X"05050505".
       PROCEDURE        DIVISION.
           CALL "CBL_NOR" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = X"F8F8F8F8"
              DISPLAY "NG" NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_AND])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE "3333".
       01  Z            PIC X(4) VALUE "5555".
       PROCEDURE        DIVISION.
           CALL "CBL_AND" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = "1111"
              DISPLAY Z NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_XOR])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE "3333".
       01  Z            PIC X(4) VALUE X"02020202".
       PROCEDURE        DIVISION.
           CALL "CBL_XOR" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = "1111"
              DISPLAY Z NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_IMP])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE HIGH-VALUE.
       01  Z            PIC X(4) VALUE "1111".
       PROCEDURE        DIVISION.
           CALL "CBL_IMP" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = "1111"
              DISPLAY Z NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_NIMP])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE "1111".
       01  Z            PIC X(4) VALUE LOW-VALUE.
       PROCEDURE        DIVISION.
           CALL "CBL_NIMP" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = "1111"
              DISPLAY Z NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_NOT])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE HIGH-VALUE.
       PROCEDURE        DIVISION.
           CALL "CBL_NOT" USING X
                BY VALUE LENGTH OF X
           END-CALL.
           IF X NOT = LOW-VALUE
              DISPLAY "NG" NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_EQ])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X(4) VALUE HIGH-VALUE.
       01  Z            PIC X(4) VALUE "1111".
       PROCEDURE        DIVISION.
           CALL "CBL_EQ" USING X Z
                BY VALUE LENGTH OF Z
           END-CALL.
           IF Z NOT = "1111"
              DISPLAY Z NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([System routine CBL_OC_GETOPT])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
      *> check combination long and short options
        DATA DIVISION.
        WORKING-STORAGE SECTION.
           01 LO.
                05 OPTIONRECORD OCCURS 2 TIMES.
                    10 ONAME        PIC X(25).
                    10 HAS-VALUE    PIC 9.
                    10 VALPOINT     POINTER     VALUE NULL.
                    10 VAL          PIC X(4).

            01 SO PIC X(256).
            01 LONGIND PIC 99.
            01 LONG-ONLY PIC 9 VALUE 1.
            01 RETURN-CHAR PIC X(4).
            01 OPT-VAL PIC X(10).
            01 RET-DISP PIC S9 VALUE 0.
            
            01 COUNTER PIC 9 VALUE 0.
        PROCEDURE DIVISION.
            MOVE "jkl" TO SO.
            
            MOVE "version" TO ONAME(1).
            MOVE 0 TO HAS-VALUE(1).
            MOVE "v" TO VAL(1).
            
            MOVE "verbose" TO ONAME(2).
            MOVE 0 TO HAS-VALUE(2).
            MOVE "V" TO VAL(2).
        
            PERFORM WITH TEST BEFORE UNTIL COUNTER > 5
                CALL 'CBL_OC_GETOPT' USING 
                BY REFERENCE SO LO LONGIND
                BY VALUE LONG-ONLY
                BY REFERENCE RETURN-CHAR OPT-VAL
            
                IF COUNTER = 0 AND RETURN-CHAR NOT = 'v' THEN
                    DISPLAY '0-Error: ' RETURN-CHAR
                END-IF
                IF COUNTER = 1 AND RETURN-CHAR NOT = 'V' THEN
                    DISPLAY '1-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 2 AND RETURN-CHAR NOT = 'j' THEN
                    DISPLAY '2-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 3 AND RETURN-CHAR NOT = 'k' THEN
                    DISPLAY '3-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 4 AND RETURN-CHAR NOT = 'l' THEN
                    DISPLAY '4-ERROR: ' RETURN-CHAR
               END-IF
                
               ADD 1 TO COUNTER
            END-PERFORM

            MOVE 0 TO RETURN-CODE.

            STOP RUN.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog2.
      *> check if partial options work correct
        DATA DIVISION.
        WORKING-STORAGE SECTION.
      *> Check with wrong record count


            01 LO.
                05 OPTIONRECORD OCCURS 3 TIMES.
                    10 ONAME        PIC X(25).
                    10 HAS-VALUE    PIC 9.
                    10 VALPOINT     POINTER     VALUE NULL.
                    10 VAL          PIC X(4).

            78 SO VALUE "jkl".
            01 LONGIND PIC 99.
            01 LONG-ONLY PIC 9 VALUE 1.
            01 RETURN-CHAR PIC X(4).
            01 OPT-VAL PIC X(10).
            01 RET-DISP PIC S9 VALUE 0.
            
            01 COUNTER PIC 9 VALUE 0.
        PROCEDURE DIVISION.
            MOVE "version" TO ONAME(1).
            MOVE 0 TO HAS-VALUE(1).
            MOVE "v" TO VAL(1).
            
            MOVE "verbose" TO ONAME(2).
            MOVE 0 to HAS-VALUE(2).
            MOVE "V" TO VAL(2).
        
            PERFORM WITH TEST BEFORE UNTIL COUNTER > 2
                CALL 'CBL_OC_GETOPT' USING 
                BY REFERENCE SO LO LONGIND
                BY VALUE LONG-ONLY
                BY REFERENCE RETURN-CHAR OPT-VAL
            
                IF COUNTER = 0 AND RETURN-CHAR NOT = '?' THEN
                    DISPLAY '0-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 1 AND RETURN-CHAR NOT = 'v' THEN
                    DISPLAY '1-ERROR: ' RETURN-CHAR
                END-IF
                      
               ADD 1 TO COUNTER
            END-PERFORM

            MOVE 0 TO RETURN-CODE.

            STOP RUN.
])

AT_DATA([prog3.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog3.
      *> check for optional and mandatory parameters
        DATA DIVISION.
        WORKING-STORAGE SECTION.
            01 SO PIC X(128).
            01 LO.
                05 OPTIONRECORD OCCURS 3 TIMES.
                    10 ONAME        PIC X(25).
                    10 HAS-VALUE    PIC 9.
                    10 VALPOINT     POINTER     VALUE NULL.
                    10 VAL          PIC X(4).
            01 LONGIND PIC 99.
            01 LONG-ONLY PIC 9 VALUE 0.
            01 RETURN-CHAR PIC X(4).
            01 OPT-VAL PIC X(10).
            01 RET-DISP PIC S9 VALUE 0.
            
            01 COUNTER PIC 9 VALUE 0.
        PROCEDURE DIVISION.
            MOVE "j:k::l" TO SO.

            MOVE "version" TO ONAME(1).
            MOVE 1 TO HAS-VALUE(1).
            MOVE "v" TO VAL(1).

            MOVE "verbose" TO ONAME(2).
            MOVE 2 TO HAS-VALUE(2).
            MOVE "V" TO VAL(2).

            MOVE "usage" TO ONAME(3).
            MOVE 0 TO HAS-VALUE(3).
            MOVE "u" TO VAL(3).

            PERFORM WITH TEST BEFORE UNTIL COUNTER > 6
                CALL 'CBL_OC_GETOPT' USING
                BY REFERENCE SO LO LONGIND
                BY VALUE LONG-ONLY
                BY REFERENCE RETURN-CHAR OPT-VAL

                IF COUNTER = 0 AND OPT-VAL(1:4) NOT = 'lang' THEN
                        DISPLAY '0-ERROR: ' OPT-VAL
                END-IF
                IF COUNTER = 1 AND 
                  (OPT-VAL(1:1) NOT = 'k' OR 
                   RETURN-CHAR  NOT = 'V' OR 
                   OPT-VAL(1:4)     = 'kang') THEN
                        DISPLAY '1-ERROR: ' OPT-VAL ' ' RETURN-CHAR ' '
                END-IF
                IF COUNTER = 2 AND RETURN-CHAR NOT = 'u' THEN
                        DISPLAY '2-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 3 AND (OPT-VAL(1:1) NOT = '5' OR 
                RETURN-CHAR NOT = 'j') THEN
                        DISPLAY '3-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 4 AND (OPT-VAL(1:1) NOT = '6' OR 
                RETURN-CHAR NOT = 'k') THEN
                        DISPLAY '4-ERROR: ' RETURN-CHAR
                END-IF
                IF COUNTER = 5 AND RETURN-CHAR NOT = 'l' THEN
                        DISPLAY '5-ERROR: ' RETURN-CHAR
                END-IF

               ADD 1 TO COUNTER
            END-PERFORM

            MOVE 0 TO RETURN-CODE.

            STOP RUN.
])

AT_DATA([prog4.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog4.
      *> check use of value pointer and trimming of opt-val
        DATA DIVISION.
        WORKING-STORAGE SECTION.
            01 SO PIC X(12).
            01 LO.
                05 OPTIONRECORD OCCURS 3 TIMES.
                    10 ONAME        PIC X(25).
                    10 HAS-VALUE    PIC 9.
                    10 VALPOINT     POINTER     VALUE NULL.
                    10 VAL          PIC X(4).
            01 LONGIND PIC 99.
            01 LONG-ONLY PIC 9 VALUE 1.
            01 RETURN-CHAR PIC X(4).
            01 OPT-VAL PIC X(10).
            01 RET-DISP PIC S999 VALUE 0.

            01 COUNTER PIC 9 VALUE 0.

            01 FLAG-VAL PIC X(4).
        procedure division.
            MOVE "jkl" TO SO.

            MOVE "static" TO ONAME(1).
            MOVE 0 TO HAS-VALUE(1).
            SET VALPOINT(1) TO ADDRESS OF FLAG-VAL.
            MOVE '1' TO VAL(1).

            MOVE "dynamic" TO ONAME(2).
            MOVE 0 TO HAS-VALUE(2).
            SET VALPOINT(2) TO ADDRESS OF FLAG-VAL.
            MOVE '0' TO VAL(2).

            MOVE "usage" TO ONAME(3).
            MOVE 1 TO HAS-VALUE(3).
            MOVE 'u' TO VAL(3).

            PERFORM WITH TEST BEFORE UNTIL COUNTER > 3
                CALL 'CBL_OC_GETOPT' USING
                BY REFERENCE SO LO LONGIND
                BY VALUE LONG-ONLY
                BY REFERENCE RETURN-CHAR OPT-VAL

                MOVE RETURN-CODE TO RET-DISP
                
                IF COUNTER = 0 AND (RETURN-CODE NOT = 0 OR 
                                    FLAG-VAL NOT = '1') THEN
                    DISPLAY 'RETURN VALUE: ' RET-DISP ' ' FLAG-VAL
                END-IF
                IF COUNTER = 1 AND (RETURN-CODE NOT = 0 OR 
                                    FLAG-VAL NOT = '0') THEN
                    DISPLAY 'RETURN VALUE: ' RET-DISP ' ' FLAG-VAL
                END-IF
                IF COUNTER = 2 AND (RETURN-CHAR NOT = 'u' OR 
                                    RETURN-CODE NOT = 2) THEN
                    DISPLAY 'RETURN VALUE: ' RET-DISP ' ' FLAG-VAL
                END-IF

               ADD 1 TO COUNTER
            END-PERFORM

            IF RETURN-CODE NOT = -1
               MOVE RETURN-CODE TO RET-DISP
               DISPLAY 'last RETURN-CODE wrong ' RET-DISP
               END-DISPLAY
            END-IF

            MOVE 0 TO RETURN-CODE.

            STOP RUN.
])

AT_DATA([prog5.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog5.
      *> check for wrong longopotion structure
        DATA DIVISION.
        WORKING-STORAGE SECTION.
            01 SO PIC X.
            01 LO.
                05 OPTIONRECORD OCCURS 2 TIMES.
                    10 ONAME        PIC X(45).
                    10 HAS-VALUE    PIC 9.
                    10 VALPOINT     POINTER     VALUE NULL.
                    10 VAL          PIC X(4).
            01 LONGIND PIC 99.
            01 LONG-ONLY PIC 9 VALUE 1.
            01 RETURN-CHAR PIC X(4).
            01 OPT-VAL PIC X(10).
            01 RET-DISP PIC S999 VALUE 0.

            01 COUNTER PIC 9 VALUE 0.

            01 FLAG-VAL PIC 9.
        PROCEDURE DIVISION.
            MOVE "super-long-option-with-more-than-25-bytes" 
            TO ONAME(1).
            MOVE 0 TO HAS-VALUE(1).
            MOVE '1' TO VAL(1).

            MOVE "stupid-long-option-with-more-than-25-bytes" 
            TO ONAME(2).
            MOVE 0 TO HAS-VALUE(2).
            MOVE '0' TO VAL(2).

            PERFORM WITH TEST BEFORE UNTIL COUNTER > 2
                CALL 'CBL_OC_GETOPT' USING
                BY REFERENCE SO LO LONGIND
                BY VALUE LONG-ONLY
                BY REFERENCE RETURN-CHAR OPT-VAL

      *>          MOVE RETURN-CODE TO RET-DISP
                
      *>          IF COUNTER = 0 AND RETURN-CODE NOT = 1 THEN
      *>              DISPLAY 'RETURN VALUE: ' RET-DISP ' ' FLAG-VAL
      *>          END-IF
            END-PERFORM
            
      *>      MOVE 0 TO RETURN-CODE.

            STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog --version --verbose -jkl], [0], [])
AT_CHECK([$COMPILE_MODULE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN prog2 --ver --vers], [0], [], [prog2: option `--ver' is ambiguous
])
AT_CHECK([$COMPILE prog3.cob], [0], , [])
AT_CHECK([./prog3 --version=lang --verbose=k --usage -j 5 -k6 -l], [0], [])
AT_CHECK([$COMPILE prog4.cob --free], [0], , [])
AT_CHECK([./prog4 --static --dynamic --usage=boringandtoolongtext], [0], [])
# Again a long and system specific error message which we ignore. 
# Return code 1 is sufficient as proof of hard return (as wanted).
AT_CHECK([$COMPILE prog5.cob], [0], , [])
AT_CHECK([./prog5 --static], [1], [], [prog5.cob: 35: libcob: Call to CBL_OC_GETOPT with wrong longoption size.
])

AT_CLEANUP


AT_SETUP([System routine CBL_COPY_FILE])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE DIVISION.
        DISPLAY "test" END-DISPLAY
        STOP RUN.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 FILE1 PIC X(8) VALUE 'prog.cob'.
        01 FILE2 PIC X(9) VALUE 'prog3.cob'.
        
        PROCEDURE DIVISION.
        CALL 'CBL_COPY_FILE' USING 
        FILE1 FILE2
        END-CALL
        STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([./prog2], [0], [], [])
AT_CHECK([diff prog.cob prog3.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([System routines for directories])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 DIR PIC X(4) VALUE 'ABCD'.
        
        PROCEDURE DIVISION.
        CALL 'CBL_CREATE_DIR' USING DIR END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error creating dir ...' END-DISPLAY
        END-IF

        CALL 'CBL_CHANGE_DIR' USING DIR END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error changing dir ...' END-DISPLAY
        END-IF

        CALL 'CBL_CHANGE_DIR' USING '..' END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error changing dir up ...' END-DISPLAY
        END-IF

        CALL 'CBL_DELETE_DIR' USING DIR END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error deleting dir' END-DISPLAY
        END-IF
        
        STOP RUN.
])


AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([test -e abcd], [1], [], [])

AT_CLEANUP


AT_SETUP([System routines for files])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 FNAME PIC X(256) VALUE 'testtext.txt'.
        01 ACCESS-MODE PIC X USAGE COMP-X VALUE 2.
        01 HANDLE PIC X(4) USAGE COMP-X.
        
        01 OFFSET PIC X(8) USAGE COMP-X.
        01 NBYTES PIC X(4) USAGE COMP-X.
        01 WRITE-BUFFER PIC X(20).
        
        PROCEDURE DIVISION.
        CALL 'CBL_CREATE_FILE' USING 
        FNAME 55 11 22 HANDLE 
        END-CALL
        IF RETURN-CODE NOT = -1
            DISPLAY 'Wrong return codes ...' END-DISPLAY
        END-IF
        
        CALL 'CBL_CREATE_FILE' USING 
        FNAME ACCESS-MODE 0 0 HANDLE 
        END-CALL        
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error creating file ...' END-DISPLAY
        END-IF
        
        MOVE 'TestText.ABCD' TO WRITE-BUFFER.
        MOVE 0 TO OFFSET.
        MOVE 9 TO NBYTES.

        CALL 'CBL_WRITE_FILE' USING 
        HANDLE OFFSET NBYTES '0' WRITE-BUFFER
        END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error writing file ...' END-DISPLAY
        END-IF
        
        CALL 'CBL_FLUSH_FILE' USING HANDLE END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error flushing file ...' END-DISPLAY
        END-IF        
        
        STOP RUN.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 FNAME PIC X(256) VALUE 'testtext.txt'.
        01 RET PIC -9.
        01 HANDLE PIC X(4) USAGE COMP-X.
        
        01 OFFSET PIC X(8) USAGE COMP-X.
        01 NBYTES PIC X(4) USAGE COMP-X.
        01 READ-BUFFER PIC X(10).
        
        PROCEDURE DIVISION.
        CALL 'CBL_OPEN_FILE' USING
        FNAME 1 0 0 HANDLE
        END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error opening file ...' END-DISPLAY
        END-IF
        
        MOVE SPACES TO READ-BUFFER.
        MOVE 2 TO OFFSET.
        MOVE 9 TO NBYTES.
        
        CALL 'CBL_READ_FILE' USING
        HANDLE OFFSET NBYTES 0 READ-BUFFER
        END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error reading file ...' END-DISPLAY
        END-IF        
        IF READ-BUFFER NOT = 'stText.'
            DISPLAY 'Wrong readbuffer ...' END-DISPLAY
        END-IF
        
        CALL 'CBL_CLOSE_FILE' USING HANDLE END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error closing file ...' END-DISPLAY
        END-IF 
        
        CALL 'CBL_RENAME_FILE' USING FNAME 'foo.txt' END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error renaming file ...' END-DISPLAY
        END-IF                               
                
        CALL 'CBL_DELETE_FILE' USING 'foo.txt' END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'Error deleting file ...' END-DISPLAY
        END-IF                
        
        STOP RUN.
])


AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [WARNING - Call to CBL_CREATE_FILE with wrong file_lock: 11
WARNING - Call to CBL_CREATE_FILE with wrong file_dev: 22
WARNING - Call to CBL_OPEN_FILE with wrong access mode: 55
])
AT_CHECK([./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([Conditional/define directives (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE NOT DEFINED
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], , [])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP


AT_SETUP([Conditional/define directives (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE prog.cob], [0], , [])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP


AT_SETUP([Conditional/define directives (3)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>ELIF ACTIVATE2 DEFINED
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE2 prog.cob], [0], , [])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP


AT_SETUP([Conditional/define directives (4)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>ELIF ACTIVATE2 DEFINED
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE2 prog.cob], [0], , [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([Conditional/define directives (5)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
       >>DISPLAY NOTOK
       >>ELIF ACTIVATE2 DEFINED
       >>DISPLAY OK
       >>ELSE
       >>DISPLAY NOTOK
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE2 prog.cob], [0],
[OK
])

AT_CLEANUP

